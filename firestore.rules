rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to access their own document
    match /users/{docId} {
      allow create: if request.auth == null;  // Allow function to create
      allow read, update: if request.auth != null && 
        request.auth.uid == getUserIdFromDocId(docId);
    }

    // Helper function to extract UID from docId
    function getUserIdFromDocId(docId) {
      let parts = docId.split('-');
      return parts[size(parts) - 1];
    }

    // Allow users to manage their job history subcollection
    match /users/{userId}/jobs/{jobId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow read: if request.auth != null && userId == request.auth.uid;
      allow write: if false; // Only backend can update usage
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}